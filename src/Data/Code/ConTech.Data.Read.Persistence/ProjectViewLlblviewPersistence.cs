//------------------------------------------------------------------------------
// <auto-generated>This code was generated by LLBLGen Pro v5.10.</auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using SD.LLBLGen.Pro.QuerySpec;
using ConTech.Data.HelperClasses;
using SD.LLBLGen.Pro.LinqSupportClasses;
using SD.LLBLGen.Pro.LinqSupportClasses.DTOProjectionHelpers;
using SD.LLBLGen.Pro.ORMSupportClasses;

namespace ConTech.Data.Read.Persistence
{

	/// <summary>Static class for (extension) methods for fetching and projecting instances of ConTech.Data.Read.DtoClasses.ProjectViewLlblView from the entity model.</summary>
	public static partial class ProjectViewLlblViewPersistence
	{
		private static readonly System.Linq.Expressions.Expression<Func<ConTech.Data.EntityClasses.ProjectViewEntity, ConTech.Data.Read.DtoClasses.ProjectViewLlblView>> _projectorExpression = CreateProjectionFunc();
		private static readonly Func<ConTech.Data.EntityClasses.ProjectViewEntity, ConTech.Data.Read.DtoClasses.ProjectViewLlblView> _compiledProjector = CreateProjectionFunc().Compile();
		/// <summary>Linq specific partial method for obtaining projection adjustments for the projection method <see cref="ProjectToProjectViewLlblView(System.Linq.IQueryable{ConTech.Data.EntityClasses.ProjectViewEntity})"/></summary>
		/// <param name="projectionAdjustments">Set this argument in an implementation of this partial method to a projection lambda similar to the generated projection in <see cref="CreateProjectionFunc"/></param>
		/// <remarks>Linq specific</remarks>
		static partial void GetAdjustmentsForProjectToProjectViewLlblView(ref System.Linq.Expressions.Expression<Func<ConTech.Data.EntityClasses.ProjectViewEntity, ConTech.Data.Read.DtoClasses.ProjectViewLlblView>> projectionAdjustments);
		/// <summary>QuerySpec specific partial method for obtaining projection adjustments for the projection method <see cref="ProjectToProjectViewLlblView(EntityQuery{ConTech.Data.EntityClasses.ProjectViewEntity}, ConTech.Data.FactoryClasses.QueryFactory)"/></summary>
		/// <param name="projectionAdjustments">Set this argument in an implementation of this partial method to a projection lambda similar to the generated projection in <see cref="ProjectToProjectViewLlblView(EntityQuery{ConTech.Data.EntityClasses.ProjectViewEntity}, ConTech.Data.FactoryClasses.QueryFactory)"/></param>
		/// <remarks>QuerySpec specific</remarks>
		static partial void GetAdjustmentsForProjectToProjectViewLlblViewQs(ref System.Linq.Expressions.Expression<Func<ConTech.Data.Read.DtoClasses.ProjectViewLlblView>> projectionAdjustments);
	
		/// <summary>Empty static ctor for triggering initialization of static members in a thread-safe manner</summary>
		static ProjectViewLlblViewPersistence() { }
	
		/// <summary>Extension method which produces a projection to ConTech.Data.Read.DtoClasses.ProjectViewLlblView which instances are projected from the results of the specified baseQuery, which returns ConTech.Data.EntityClasses.ProjectViewEntity instances, the root entity of the derived element returned by this query.</summary>
		/// <param name="baseQuery">The base query to project the derived element instances from.</param>
		/// <returns>IQueryable to retrieve ConTech.Data.Read.DtoClasses.ProjectViewLlblView instances</returns>
		public static IQueryable<ConTech.Data.Read.DtoClasses.ProjectViewLlblView> ProjectToProjectViewLlblView(this IQueryable<ConTech.Data.EntityClasses.ProjectViewEntity> baseQuery)
		{
			return baseQuery.Select(_projectorExpression);
		}

		/// <summary>Extension method which produces a projection to ConTech.Data.Read.DtoClasses.ProjectViewLlblView which instances are projected from the results of the specified baseQuery using QuerySpec, which returns ConTech.Data.EntityClasses.ProjectViewEntity instances, the root entity of the derived element returned by this query.</summary>
		/// <param name="baseQuery">The base query to project the derived element instances from.</param>
		/// <param name="qf">The query factory used to create baseQuery.</param>
		/// <returns>DynamicQuery to retrieve ConTech.Data.Read.DtoClasses.ProjectViewLlblView instances</returns>
		public static DynamicQuery<ConTech.Data.Read.DtoClasses.ProjectViewLlblView> ProjectToProjectViewLlblView(this EntityQuery<ConTech.Data.EntityClasses.ProjectViewEntity> baseQuery, ConTech.Data.FactoryClasses.QueryFactory qf)
		{
			System.Linq.Expressions.Expression<Func<ConTech.Data.Read.DtoClasses.ProjectViewLlblView>> projectionAdjustments = null;
			GetAdjustmentsForProjectToProjectViewLlblViewQs(ref projectionAdjustments);
			return qf.Create()
				.From(baseQuery.Select(Projection.Full).As("__BQ"))
				.Select(LinqUtils.MergeProjectionAdjustmentsIntoProjection(() => new ConTech.Data.Read.DtoClasses.ProjectViewLlblView()
				{
					BackgroundPdf = ProjectViewFields.BackgroundPdf.Source("__BQ").ToValue<System.Byte[]>(),
					CreatedByUserId = ProjectViewFields.CreatedByUserId.Source("__BQ").ToValue<Nullable<System.Int32>>(),
					DateCreatedUtc = ProjectViewFields.DateCreatedUtc.Source("__BQ").ToValue<System.DateTime>(),
					Description = ProjectViewFields.Description.Source("__BQ").ToValue<System.String>(),
					Id = ProjectViewFields.Id.Source("__BQ").ToValue<System.Int32>(),
					LastModifiedByUserId = ProjectViewFields.LastModifiedByUserId.Source("__BQ").ToValue<Nullable<System.Int32>>(),
					LastModifiedUtc = ProjectViewFields.LastModifiedUtc.Source("__BQ").ToValue<Nullable<System.DateTime>>(),
					Name = ProjectViewFields.Name.Source("__BQ").ToValue<System.String>(),
					ObjectStatus = ProjectViewFields.ObjectStatus.Source("__BQ").ToValue<System.Int32>(),
					ProjectId = ProjectViewFields.ProjectId.Source("__BQ").ToValue<System.Int32>(),
	// __LLBLGENPRO_USER_CODE_REGION_START ProjectionRegionQS_ProjectViewLlblView 
	// __LLBLGENPRO_USER_CODE_REGION_END 
				}, projectionAdjustments, false));
		}

		/// <summary>Extension method which produces a projection to ConTech.Data.Read.DtoClasses.ProjectViewLlblView which instances are projected from the ConTech.Data.EntityClasses.ProjectViewEntity entity instance specified, the root entity of the derived element returned by this method.</summary>
		/// <param name="entity">The entity to project from.</param>
		/// <returns>ConTech.Data.EntityClasses.ProjectViewEntity instance created from the specified entity instance</returns>
		public static ConTech.Data.Read.DtoClasses.ProjectViewLlblView ProjectToProjectViewLlblView(this ConTech.Data.EntityClasses.ProjectViewEntity entity)
		{
			return _compiledProjector(entity);
		}

		private static System.Linq.Expressions.Expression<Func<ConTech.Data.EntityClasses.ProjectViewEntity, ConTech.Data.Read.DtoClasses.ProjectViewLlblView>> CreateProjectionFunc()
		{
			System.Linq.Expressions.Expression<Func<ConTech.Data.EntityClasses.ProjectViewEntity, ConTech.Data.Read.DtoClasses.ProjectViewLlblView>> mainProjection = p__0 => new ConTech.Data.Read.DtoClasses.ProjectViewLlblView()
			{
				BackgroundPdf = p__0.BackgroundPdf,
				CreatedByUserId = p__0.CreatedByUserId,
				DateCreatedUtc = p__0.DateCreatedUtc,
				Description = p__0.Description,
				Id = p__0.Id,
				LastModifiedByUserId = p__0.LastModifiedByUserId,
				LastModifiedUtc = p__0.LastModifiedUtc,
				Name = p__0.Name,
				ObjectStatus = p__0.ObjectStatus,
				ProjectId = p__0.ProjectId,
	// __LLBLGENPRO_USER_CODE_REGION_START ProjectionRegion_ProjectViewLlblView 
	// __LLBLGENPRO_USER_CODE_REGION_END 
			};
			System.Linq.Expressions.Expression<Func<ConTech.Data.EntityClasses.ProjectViewEntity, ConTech.Data.Read.DtoClasses.ProjectViewLlblView>> projectionAdjustments = null;
			GetAdjustmentsForProjectToProjectViewLlblView(ref projectionAdjustments);
			return LinqUtils.MergeProjectionAdjustmentsIntoProjection(mainProjection, projectionAdjustments, true);
		}
	}
}


