//------------------------------------------------------------------------------
// <auto-generated>This code was generated by LLBLGen Pro v5.10.</auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using SD.LLBLGen.Pro.QuerySpec;
using ConTech.Data.HelperClasses;
using SD.LLBLGen.Pro.LinqSupportClasses;
using SD.LLBLGen.Pro.LinqSupportClasses.DTOProjectionHelpers;
using SD.LLBLGen.Pro.ORMSupportClasses;

namespace ConTech.Data.Read.Persistence
{

	/// <summary>Static class for (extension) methods for fetching and projecting instances of ConTech.Data.Read.DtoClasses.ViewLevelListView from the entity model.</summary>
	public static partial class ViewLevelListViewPersistence
	{
		private static readonly System.Linq.Expressions.Expression<Func<ConTech.Data.EntityClasses.ViewLevelEntity, ConTech.Data.Read.DtoClasses.ViewLevelListView>> _projectorExpression = CreateProjectionFunc();
		private static readonly Func<ConTech.Data.EntityClasses.ViewLevelEntity, ConTech.Data.Read.DtoClasses.ViewLevelListView> _compiledProjector = CreateProjectionFunc().Compile();
		/// <summary>Linq specific partial method for obtaining projection adjustments for the projection method <see cref="ProjectToViewLevelListView(System.Linq.IQueryable{ConTech.Data.EntityClasses.ViewLevelEntity})"/></summary>
		/// <param name="projectionAdjustments">Set this argument in an implementation of this partial method to a projection lambda similar to the generated projection in <see cref="CreateProjectionFunc"/></param>
		/// <remarks>Linq specific</remarks>
		static partial void GetAdjustmentsForProjectToViewLevelListView(ref System.Linq.Expressions.Expression<Func<ConTech.Data.EntityClasses.ViewLevelEntity, ConTech.Data.Read.DtoClasses.ViewLevelListView>> projectionAdjustments);
		/// <summary>QuerySpec specific partial method for obtaining projection adjustments for the projection method <see cref="ProjectToViewLevelListView(EntityQuery{ConTech.Data.EntityClasses.ViewLevelEntity}, ConTech.Data.FactoryClasses.QueryFactory)"/></summary>
		/// <param name="projectionAdjustments">Set this argument in an implementation of this partial method to a projection lambda similar to the generated projection in <see cref="ProjectToViewLevelListView(EntityQuery{ConTech.Data.EntityClasses.ViewLevelEntity}, ConTech.Data.FactoryClasses.QueryFactory)"/></param>
		/// <remarks>QuerySpec specific</remarks>
		static partial void GetAdjustmentsForProjectToViewLevelListViewQs(ref System.Linq.Expressions.Expression<Func<ConTech.Data.Read.DtoClasses.ViewLevelListView>> projectionAdjustments);
	
		/// <summary>Empty static ctor for triggering initialization of static members in a thread-safe manner</summary>
		static ViewLevelListViewPersistence() { }
	
		/// <summary>Extension method which produces a projection to ConTech.Data.Read.DtoClasses.ViewLevelListView which instances are projected from the results of the specified baseQuery, which returns ConTech.Data.EntityClasses.ViewLevelEntity instances, the root entity of the derived element returned by this query.</summary>
		/// <param name="baseQuery">The base query to project the derived element instances from.</param>
		/// <returns>IQueryable to retrieve ConTech.Data.Read.DtoClasses.ViewLevelListView instances</returns>
		public static IQueryable<ConTech.Data.Read.DtoClasses.ViewLevelListView> ProjectToViewLevelListView(this IQueryable<ConTech.Data.EntityClasses.ViewLevelEntity> baseQuery)
		{
			return baseQuery.Select(_projectorExpression);
		}

		/// <summary>Extension method which produces a projection to ConTech.Data.Read.DtoClasses.ViewLevelListView which instances are projected from the results of the specified baseQuery using QuerySpec, which returns ConTech.Data.EntityClasses.ViewLevelEntity instances, the root entity of the derived element returned by this query.</summary>
		/// <param name="baseQuery">The base query to project the derived element instances from.</param>
		/// <param name="qf">The query factory used to create baseQuery.</param>
		/// <returns>DynamicQuery to retrieve ConTech.Data.Read.DtoClasses.ViewLevelListView instances</returns>
		public static DynamicQuery<ConTech.Data.Read.DtoClasses.ViewLevelListView> ProjectToViewLevelListView(this EntityQuery<ConTech.Data.EntityClasses.ViewLevelEntity> baseQuery, ConTech.Data.FactoryClasses.QueryFactory qf)
		{
			System.Linq.Expressions.Expression<Func<ConTech.Data.Read.DtoClasses.ViewLevelListView>> projectionAdjustments = null;
			GetAdjustmentsForProjectToViewLevelListViewQs(ref projectionAdjustments);
			return qf.Create()
				.From(baseQuery.Select(Projection.Full).As("__BQ"))
				.Select(LinqUtils.MergeProjectionAdjustmentsIntoProjection(() => new ConTech.Data.Read.DtoClasses.ViewLevelListView()
				{
					CreatedByUserId = ViewLevelFields.CreatedByUserId.Source("__BQ").ToValue<Nullable<System.Int32>>(),
					DateCreatedUtc = ViewLevelFields.DateCreatedUtc.Source("__BQ").ToValue<System.DateTime>(),
					Description = ViewLevelFields.Description.Source("__BQ").ToValue<System.String>(),
					DxfData = ViewLevelFields.DxfData.Source("__BQ").ToValue<System.String>(),
					EntityData = ViewLevelFields.EntityData.Source("__BQ").ToValue<System.String>(),
					Id = ViewLevelFields.Id.Source("__BQ").ToValue<System.Guid>(),
					LastModifiedByUserId = ViewLevelFields.LastModifiedByUserId.Source("__BQ").ToValue<Nullable<System.Int32>>(),
					LastModifiedUtc = ViewLevelFields.LastModifiedUtc.Source("__BQ").ToValue<Nullable<System.DateTime>>(),
					Name = ViewLevelFields.Name.Source("__BQ").ToValue<System.String>(),
					ObjectStatus = ViewLevelFields.ObjectStatus.Source("__BQ").ToValue<System.Int32>(),
					Scale = ViewLevelFields.Scale.Source("__BQ").ToValue<Nullable<System.Single>>(),
					TransitionX = ViewLevelFields.TransitionX.Source("__BQ").ToValue<Nullable<System.Single>>(),
					TransitionY = ViewLevelFields.TransitionY.Source("__BQ").ToValue<Nullable<System.Single>>(),
					ViewId = ViewLevelFields.ViewId.Source("__BQ").ToValue<System.Int32>(),
	// __LLBLGENPRO_USER_CODE_REGION_START ProjectionRegionQS_ViewLevelListView 
	// __LLBLGENPRO_USER_CODE_REGION_END 
				}, projectionAdjustments, false));
		}

		/// <summary>Extension method which produces a projection to ConTech.Data.Read.DtoClasses.ViewLevelListView which instances are projected from the ConTech.Data.EntityClasses.ViewLevelEntity entity instance specified, the root entity of the derived element returned by this method.</summary>
		/// <param name="entity">The entity to project from.</param>
		/// <returns>ConTech.Data.EntityClasses.ViewLevelEntity instance created from the specified entity instance</returns>
		public static ConTech.Data.Read.DtoClasses.ViewLevelListView ProjectToViewLevelListView(this ConTech.Data.EntityClasses.ViewLevelEntity entity)
		{
			return _compiledProjector(entity);
		}

		private static System.Linq.Expressions.Expression<Func<ConTech.Data.EntityClasses.ViewLevelEntity, ConTech.Data.Read.DtoClasses.ViewLevelListView>> CreateProjectionFunc()
		{
			System.Linq.Expressions.Expression<Func<ConTech.Data.EntityClasses.ViewLevelEntity, ConTech.Data.Read.DtoClasses.ViewLevelListView>> mainProjection = p__0 => new ConTech.Data.Read.DtoClasses.ViewLevelListView()
			{
				CreatedByUserId = p__0.CreatedByUserId,
				DateCreatedUtc = p__0.DateCreatedUtc,
				Description = p__0.Description,
				DxfData = p__0.DxfData,
				EntityData = p__0.EntityData,
				Id = p__0.Id,
				LastModifiedByUserId = p__0.LastModifiedByUserId,
				LastModifiedUtc = p__0.LastModifiedUtc,
				Name = p__0.Name,
				ObjectStatus = p__0.ObjectStatus,
				Scale = p__0.Scale,
				TransitionX = p__0.TransitionX,
				TransitionY = p__0.TransitionY,
				ViewId = p__0.ViewId,
	// __LLBLGENPRO_USER_CODE_REGION_START ProjectionRegion_ViewLevelListView 
	// __LLBLGENPRO_USER_CODE_REGION_END 
			};
			System.Linq.Expressions.Expression<Func<ConTech.Data.EntityClasses.ViewLevelEntity, ConTech.Data.Read.DtoClasses.ViewLevelListView>> projectionAdjustments = null;
			GetAdjustmentsForProjectToViewLevelListView(ref projectionAdjustments);
			return LinqUtils.MergeProjectionAdjustmentsIntoProjection(mainProjection, projectionAdjustments, true);
		}
	}
}


