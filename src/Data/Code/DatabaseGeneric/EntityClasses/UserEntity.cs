//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.10.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using ConTech.Data.HelperClasses;
using ConTech.Data.FactoryClasses;
using ConTech.Data.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace ConTech.Data.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END

	/// <summary>Entity class which represents the entity 'User'.<br/><br/></summary>
	[Serializable]
	public partial class UserEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END
	
	{
		private EntityCollection<EntityTypeEntity> _entityTypes;
		private EntityCollection<EntityTypeEntity> _entityTypes1;
		private EntityCollection<LevelChildEntity> _levelChildren;
		private EntityCollection<LevelChildEntity> _levelChildren1;
		private EntityCollection<LevelEntityEntity> _levelEntities;
		private EntityCollection<LevelEntityEntity> _levelEntities1;
		private EntityCollection<PersonEntity> _people;
		private EntityCollection<PersonEntity> _people1;
		private EntityCollection<ProjectEntity> _projects;
		private EntityCollection<ProjectEntity> _projects1;
		private EntityCollection<ProjectViewEntity> _projectViews;
		private EntityCollection<ProjectViewEntity> _projectViews1;
		private EntityCollection<UserEntity> _users;
		private EntityCollection<UserEntity> _users1;
		private EntityCollection<ViewLevelEntity> _viewLevels;
		private EntityCollection<ViewLevelEntity> _viewLevels1;
		private PersonEntity _person;
		private UserEntity _user;
		private UserEntity _user1;
		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END

		private static UserEntityStaticMetaData _staticMetaData = new UserEntityStaticMetaData();
		private static UserRelations _relationsFactory = new UserRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name Person</summary>
			public static readonly string Person = "Person";
			/// <summary>Member name User</summary>
			public static readonly string User = "User";
			/// <summary>Member name User1</summary>
			public static readonly string User1 = "User1";
			/// <summary>Member name EntityTypes</summary>
			public static readonly string EntityTypes = "EntityTypes";
			/// <summary>Member name EntityTypes1</summary>
			public static readonly string EntityTypes1 = "EntityTypes1";
			/// <summary>Member name LevelChildren</summary>
			public static readonly string LevelChildren = "LevelChildren";
			/// <summary>Member name LevelChildren1</summary>
			public static readonly string LevelChildren1 = "LevelChildren1";
			/// <summary>Member name LevelEntities</summary>
			public static readonly string LevelEntities = "LevelEntities";
			/// <summary>Member name LevelEntities1</summary>
			public static readonly string LevelEntities1 = "LevelEntities1";
			/// <summary>Member name People</summary>
			public static readonly string People = "People";
			/// <summary>Member name People1</summary>
			public static readonly string People1 = "People1";
			/// <summary>Member name Projects</summary>
			public static readonly string Projects = "Projects";
			/// <summary>Member name Projects1</summary>
			public static readonly string Projects1 = "Projects1";
			/// <summary>Member name ProjectViews</summary>
			public static readonly string ProjectViews = "ProjectViews";
			/// <summary>Member name ProjectViews1</summary>
			public static readonly string ProjectViews1 = "ProjectViews1";
			/// <summary>Member name Users</summary>
			public static readonly string Users = "Users";
			/// <summary>Member name Users1</summary>
			public static readonly string Users1 = "Users1";
			/// <summary>Member name ViewLevels</summary>
			public static readonly string ViewLevels = "ViewLevels";
			/// <summary>Member name ViewLevels1</summary>
			public static readonly string ViewLevels1 = "ViewLevels1";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class UserEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public UserEntityStaticMetaData()
			{
				SetEntityCoreInfo("UserEntity", InheritanceHierarchyType.None, false, (int)ConTech.Data.EntityType.UserEntity, typeof(UserEntity), typeof(UserEntityFactory), false);
				AddNavigatorMetaData<UserEntity, EntityCollection<EntityTypeEntity>>("EntityTypes", a => a._entityTypes, (a, b) => a._entityTypes = b, a => a.EntityTypes, () => new UserRelations().EntityTypeEntityUsingCreatedByUserId, typeof(EntityTypeEntity), (int)ConTech.Data.EntityType.EntityTypeEntity);
				AddNavigatorMetaData<UserEntity, EntityCollection<EntityTypeEntity>>("EntityTypes1", a => a._entityTypes1, (a, b) => a._entityTypes1 = b, a => a.EntityTypes1, () => new UserRelations().EntityTypeEntityUsingLastModifiedByUserId, typeof(EntityTypeEntity), (int)ConTech.Data.EntityType.EntityTypeEntity);
				AddNavigatorMetaData<UserEntity, EntityCollection<LevelChildEntity>>("LevelChildren", a => a._levelChildren, (a, b) => a._levelChildren = b, a => a.LevelChildren, () => new UserRelations().LevelChildEntityUsingCreatedByUserId, typeof(LevelChildEntity), (int)ConTech.Data.EntityType.LevelChildEntity);
				AddNavigatorMetaData<UserEntity, EntityCollection<LevelChildEntity>>("LevelChildren1", a => a._levelChildren1, (a, b) => a._levelChildren1 = b, a => a.LevelChildren1, () => new UserRelations().LevelChildEntityUsingLastModifiedByUserId, typeof(LevelChildEntity), (int)ConTech.Data.EntityType.LevelChildEntity);
				AddNavigatorMetaData<UserEntity, EntityCollection<LevelEntityEntity>>("LevelEntities", a => a._levelEntities, (a, b) => a._levelEntities = b, a => a.LevelEntities, () => new UserRelations().LevelEntityEntityUsingCreatedByUserId, typeof(LevelEntityEntity), (int)ConTech.Data.EntityType.LevelEntityEntity);
				AddNavigatorMetaData<UserEntity, EntityCollection<LevelEntityEntity>>("LevelEntities1", a => a._levelEntities1, (a, b) => a._levelEntities1 = b, a => a.LevelEntities1, () => new UserRelations().LevelEntityEntityUsingLastModifiedByUserId, typeof(LevelEntityEntity), (int)ConTech.Data.EntityType.LevelEntityEntity);
				AddNavigatorMetaData<UserEntity, EntityCollection<PersonEntity>>("People", a => a._people, (a, b) => a._people = b, a => a.People, () => new UserRelations().PersonEntityUsingCreatedByUserId, typeof(PersonEntity), (int)ConTech.Data.EntityType.PersonEntity);
				AddNavigatorMetaData<UserEntity, EntityCollection<PersonEntity>>("People1", a => a._people1, (a, b) => a._people1 = b, a => a.People1, () => new UserRelations().PersonEntityUsingLastModifiedByUserId, typeof(PersonEntity), (int)ConTech.Data.EntityType.PersonEntity);
				AddNavigatorMetaData<UserEntity, EntityCollection<ProjectEntity>>("Projects", a => a._projects, (a, b) => a._projects = b, a => a.Projects, () => new UserRelations().ProjectEntityUsingCreatedByUserId, typeof(ProjectEntity), (int)ConTech.Data.EntityType.ProjectEntity);
				AddNavigatorMetaData<UserEntity, EntityCollection<ProjectEntity>>("Projects1", a => a._projects1, (a, b) => a._projects1 = b, a => a.Projects1, () => new UserRelations().ProjectEntityUsingLastModifiedByUserId, typeof(ProjectEntity), (int)ConTech.Data.EntityType.ProjectEntity);
				AddNavigatorMetaData<UserEntity, EntityCollection<ProjectViewEntity>>("ProjectViews", a => a._projectViews, (a, b) => a._projectViews = b, a => a.ProjectViews, () => new UserRelations().ProjectViewEntityUsingCreatedByUserId, typeof(ProjectViewEntity), (int)ConTech.Data.EntityType.ProjectViewEntity);
				AddNavigatorMetaData<UserEntity, EntityCollection<ProjectViewEntity>>("ProjectViews1", a => a._projectViews1, (a, b) => a._projectViews1 = b, a => a.ProjectViews1, () => new UserRelations().ProjectViewEntityUsingLastModifiedByUserId, typeof(ProjectViewEntity), (int)ConTech.Data.EntityType.ProjectViewEntity);
				AddNavigatorMetaData<UserEntity, EntityCollection<UserEntity>>("Users", a => a._users, (a, b) => a._users = b, a => a.Users, () => new UserRelations().UserEntityUsingCreatedByUserId, typeof(UserEntity), (int)ConTech.Data.EntityType.UserEntity);
				AddNavigatorMetaData<UserEntity, EntityCollection<UserEntity>>("Users1", a => a._users1, (a, b) => a._users1 = b, a => a.Users1, () => new UserRelations().UserEntityUsingLastModifiedByUserId, typeof(UserEntity), (int)ConTech.Data.EntityType.UserEntity);
				AddNavigatorMetaData<UserEntity, EntityCollection<ViewLevelEntity>>("ViewLevels", a => a._viewLevels, (a, b) => a._viewLevels = b, a => a.ViewLevels, () => new UserRelations().ViewLevelEntityUsingCreatedByUserId, typeof(ViewLevelEntity), (int)ConTech.Data.EntityType.ViewLevelEntity);
				AddNavigatorMetaData<UserEntity, EntityCollection<ViewLevelEntity>>("ViewLevels1", a => a._viewLevels1, (a, b) => a._viewLevels1 = b, a => a.ViewLevels1, () => new UserRelations().ViewLevelEntityUsingLastModifiedByUserId, typeof(ViewLevelEntity), (int)ConTech.Data.EntityType.ViewLevelEntity);
				AddNavigatorMetaData<UserEntity, PersonEntity>("Person", "Users", (a, b) => a._person = b, a => a._person, (a, b) => a.Person = b, ConTech.Data.RelationClasses.StaticUserRelations.PersonEntityUsingPersonIdStatic, ()=>new UserRelations().PersonEntityUsingPersonId, null, new int[] { (int)UserFieldIndex.PersonId }, null, true, (int)ConTech.Data.EntityType.PersonEntity);
				AddNavigatorMetaData<UserEntity, UserEntity>("User", "Users", (a, b) => a._user = b, a => a._user, (a, b) => a.User = b, ConTech.Data.RelationClasses.StaticUserRelations.UserEntityUsingIdCreatedByUserIdStatic, ()=>new UserRelations().UserEntityUsingIdCreatedByUserId, null, new int[] { (int)UserFieldIndex.CreatedByUserId }, null, true, (int)ConTech.Data.EntityType.UserEntity);
				AddNavigatorMetaData<UserEntity, UserEntity>("User1", "Users1", (a, b) => a._user1 = b, a => a._user1, (a, b) => a.User1 = b, ConTech.Data.RelationClasses.StaticUserRelations.UserEntityUsingIdLastModifiedByUserIdStatic, ()=>new UserRelations().UserEntityUsingIdLastModifiedByUserId, null, new int[] { (int)UserFieldIndex.LastModifiedByUserId }, null, true, (int)ConTech.Data.EntityType.UserEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static UserEntity()
		{
		}

		/// <summary> CTor</summary>
		public UserEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public UserEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this UserEntity</param>
		public UserEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for User which data should be fetched into this User object</param>
		public UserEntity(System.Int32 id) : this(id, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for User which data should be fetched into this User object</param>
		/// <param name="validator">The custom validator object for this UserEntity</param>
		public UserEntity(System.Int32 id, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.Id = id;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected UserEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'EntityType' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEntityTypes() { return CreateRelationInfoForNavigator("EntityTypes"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'EntityType' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEntityTypes1() { return CreateRelationInfoForNavigator("EntityTypes1"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'LevelChild' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLevelChildren() { return CreateRelationInfoForNavigator("LevelChildren"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'LevelChild' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLevelChildren1() { return CreateRelationInfoForNavigator("LevelChildren1"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'LevelEntity' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLevelEntities() { return CreateRelationInfoForNavigator("LevelEntities"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'LevelEntity' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLevelEntities1() { return CreateRelationInfoForNavigator("LevelEntities1"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'Person' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoPeople() { return CreateRelationInfoForNavigator("People"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'Person' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoPeople1() { return CreateRelationInfoForNavigator("People1"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'Project' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoProjects() { return CreateRelationInfoForNavigator("Projects"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'Project' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoProjects1() { return CreateRelationInfoForNavigator("Projects1"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'ProjectView' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoProjectViews() { return CreateRelationInfoForNavigator("ProjectViews"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'ProjectView' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoProjectViews1() { return CreateRelationInfoForNavigator("ProjectViews1"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'User' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoUsers() { return CreateRelationInfoForNavigator("Users"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'User' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoUsers1() { return CreateRelationInfoForNavigator("Users1"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'ViewLevel' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoViewLevels() { return CreateRelationInfoForNavigator("ViewLevels"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'ViewLevel' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoViewLevels1() { return CreateRelationInfoForNavigator("ViewLevels1"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'Person' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoPerson() { return CreateRelationInfoForNavigator("Person"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'User' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoUser() { return CreateRelationInfoForNavigator("User"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'User' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoUser1() { return CreateRelationInfoForNavigator("User1"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this UserEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END


			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static UserRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'EntityType' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEntityTypes { get { return _staticMetaData.GetPrefetchPathElement("EntityTypes", CommonEntityBase.CreateEntityCollection<EntityTypeEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'EntityType' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEntityTypes1 { get { return _staticMetaData.GetPrefetchPathElement("EntityTypes1", CommonEntityBase.CreateEntityCollection<EntityTypeEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'LevelChild' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLevelChildren { get { return _staticMetaData.GetPrefetchPathElement("LevelChildren", CommonEntityBase.CreateEntityCollection<LevelChildEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'LevelChild' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLevelChildren1 { get { return _staticMetaData.GetPrefetchPathElement("LevelChildren1", CommonEntityBase.CreateEntityCollection<LevelChildEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'LevelEntity' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLevelEntities { get { return _staticMetaData.GetPrefetchPathElement("LevelEntities", CommonEntityBase.CreateEntityCollection<LevelEntityEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'LevelEntity' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLevelEntities1 { get { return _staticMetaData.GetPrefetchPathElement("LevelEntities1", CommonEntityBase.CreateEntityCollection<LevelEntityEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Person' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathPeople { get { return _staticMetaData.GetPrefetchPathElement("People", CommonEntityBase.CreateEntityCollection<PersonEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Person' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathPeople1 { get { return _staticMetaData.GetPrefetchPathElement("People1", CommonEntityBase.CreateEntityCollection<PersonEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Project' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathProjects { get { return _staticMetaData.GetPrefetchPathElement("Projects", CommonEntityBase.CreateEntityCollection<ProjectEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Project' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathProjects1 { get { return _staticMetaData.GetPrefetchPathElement("Projects1", CommonEntityBase.CreateEntityCollection<ProjectEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'ProjectView' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathProjectViews { get { return _staticMetaData.GetPrefetchPathElement("ProjectViews", CommonEntityBase.CreateEntityCollection<ProjectViewEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'ProjectView' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathProjectViews1 { get { return _staticMetaData.GetPrefetchPathElement("ProjectViews1", CommonEntityBase.CreateEntityCollection<ProjectViewEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'User' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathUsers { get { return _staticMetaData.GetPrefetchPathElement("Users", CommonEntityBase.CreateEntityCollection<UserEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'User' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathUsers1 { get { return _staticMetaData.GetPrefetchPathElement("Users1", CommonEntityBase.CreateEntityCollection<UserEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'ViewLevel' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathViewLevels { get { return _staticMetaData.GetPrefetchPathElement("ViewLevels", CommonEntityBase.CreateEntityCollection<ViewLevelEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'ViewLevel' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathViewLevels1 { get { return _staticMetaData.GetPrefetchPathElement("ViewLevels1", CommonEntityBase.CreateEntityCollection<ViewLevelEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Person' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathPerson { get { return _staticMetaData.GetPrefetchPathElement("Person", CommonEntityBase.CreateEntityCollection<PersonEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'User' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathUser { get { return _staticMetaData.GetPrefetchPathElement("User", CommonEntityBase.CreateEntityCollection<UserEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'User' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathUser1 { get { return _staticMetaData.GetPrefetchPathElement("User1", CommonEntityBase.CreateEntityCollection<UserEntity>()); } }

		/// <summary>The CreatedByUserId property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."CreatedByUserId".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> CreatedByUserId
		{
			get { return (Nullable<System.Int32>)GetValue((int)UserFieldIndex.CreatedByUserId, false); }
			set	{ SetValue((int)UserFieldIndex.CreatedByUserId, value); }
		}

		/// <summary>The DateCreatedUtc property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."DateCreatedUtc".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime DateCreatedUtc
		{
			get { return (System.DateTime)GetValue((int)UserFieldIndex.DateCreatedUtc, true); }
			set	{ SetValue((int)UserFieldIndex.DateCreatedUtc, value); }
		}

		/// <summary>The Id property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."Id".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int32 Id
		{
			get { return (System.Int32)GetValue((int)UserFieldIndex.Id, true); }
			set { SetValue((int)UserFieldIndex.Id, value); }		}

		/// <summary>The LastModifiedByUserId property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."LastModifiedByUserId".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> LastModifiedByUserId
		{
			get { return (Nullable<System.Int32>)GetValue((int)UserFieldIndex.LastModifiedByUserId, false); }
			set	{ SetValue((int)UserFieldIndex.LastModifiedByUserId, value); }
		}

		/// <summary>The LastModifiedUtc property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."LastModifiedUtc".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.DateTime> LastModifiedUtc
		{
			get { return (Nullable<System.DateTime>)GetValue((int)UserFieldIndex.LastModifiedUtc, false); }
			set	{ SetValue((int)UserFieldIndex.LastModifiedUtc, value); }
		}

		/// <summary>The ObjectStatus property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."ObjectStatus".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 ObjectStatus
		{
			get { return (System.Int32)GetValue((int)UserFieldIndex.ObjectStatus, true); }
			set	{ SetValue((int)UserFieldIndex.ObjectStatus, value); }
		}

		/// <summary>The Password property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."Password".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 200.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String Password
		{
			get { return (System.String)GetValue((int)UserFieldIndex.Password, true); }
			set	{ SetValue((int)UserFieldIndex.Password, value); }
		}

		/// <summary>The PersonId property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."PersonId".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 PersonId
		{
			get { return (System.Int32)GetValue((int)UserFieldIndex.PersonId, true); }
			set	{ SetValue((int)UserFieldIndex.PersonId, value); }
		}

		/// <summary>The ResetExpirationDate property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."ResetExpirationDate".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.DateTime> ResetExpirationDate
		{
			get { return (Nullable<System.DateTime>)GetValue((int)UserFieldIndex.ResetExpirationDate, false); }
			set	{ SetValue((int)UserFieldIndex.ResetExpirationDate, value); }
		}

		/// <summary>The ResetToken property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."ResetToken".<br/>Table field type characteristics (type, precision, scale, length): UniqueIdentifier, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Guid> ResetToken
		{
			get { return (Nullable<System.Guid>)GetValue((int)UserFieldIndex.ResetToken, false); }
			set	{ SetValue((int)UserFieldIndex.ResetToken, value); }
		}

		/// <summary>Gets the EntityCollection with the related entities of type 'EntityTypeEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(EntityTypeEntity))]
		public virtual EntityCollection<EntityTypeEntity> EntityTypes { get { return GetOrCreateEntityCollection<EntityTypeEntity, EntityTypeEntityFactory>("User", true, false, ref _entityTypes); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'EntityTypeEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(EntityTypeEntity))]
		public virtual EntityCollection<EntityTypeEntity> EntityTypes1 { get { return GetOrCreateEntityCollection<EntityTypeEntity, EntityTypeEntityFactory>("User1", true, false, ref _entityTypes1); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'LevelChildEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(LevelChildEntity))]
		public virtual EntityCollection<LevelChildEntity> LevelChildren { get { return GetOrCreateEntityCollection<LevelChildEntity, LevelChildEntityFactory>("User", true, false, ref _levelChildren); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'LevelChildEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(LevelChildEntity))]
		public virtual EntityCollection<LevelChildEntity> LevelChildren1 { get { return GetOrCreateEntityCollection<LevelChildEntity, LevelChildEntityFactory>("User1", true, false, ref _levelChildren1); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'LevelEntityEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(LevelEntityEntity))]
		public virtual EntityCollection<LevelEntityEntity> LevelEntities { get { return GetOrCreateEntityCollection<LevelEntityEntity, LevelEntityEntityFactory>("User", true, false, ref _levelEntities); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'LevelEntityEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(LevelEntityEntity))]
		public virtual EntityCollection<LevelEntityEntity> LevelEntities1 { get { return GetOrCreateEntityCollection<LevelEntityEntity, LevelEntityEntityFactory>("User1", true, false, ref _levelEntities1); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'PersonEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(PersonEntity))]
		public virtual EntityCollection<PersonEntity> People { get { return GetOrCreateEntityCollection<PersonEntity, PersonEntityFactory>("User", true, false, ref _people); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'PersonEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(PersonEntity))]
		public virtual EntityCollection<PersonEntity> People1 { get { return GetOrCreateEntityCollection<PersonEntity, PersonEntityFactory>("User1", true, false, ref _people1); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'ProjectEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(ProjectEntity))]
		public virtual EntityCollection<ProjectEntity> Projects { get { return GetOrCreateEntityCollection<ProjectEntity, ProjectEntityFactory>("User", true, false, ref _projects); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'ProjectEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(ProjectEntity))]
		public virtual EntityCollection<ProjectEntity> Projects1 { get { return GetOrCreateEntityCollection<ProjectEntity, ProjectEntityFactory>("User1", true, false, ref _projects1); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'ProjectViewEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(ProjectViewEntity))]
		public virtual EntityCollection<ProjectViewEntity> ProjectViews { get { return GetOrCreateEntityCollection<ProjectViewEntity, ProjectViewEntityFactory>("User", true, false, ref _projectViews); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'ProjectViewEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(ProjectViewEntity))]
		public virtual EntityCollection<ProjectViewEntity> ProjectViews1 { get { return GetOrCreateEntityCollection<ProjectViewEntity, ProjectViewEntityFactory>("User1", true, false, ref _projectViews1); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'UserEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(UserEntity))]
		public virtual EntityCollection<UserEntity> Users { get { return GetOrCreateEntityCollection<UserEntity, UserEntityFactory>("User", true, false, ref _users); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'UserEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(UserEntity))]
		public virtual EntityCollection<UserEntity> Users1 { get { return GetOrCreateEntityCollection<UserEntity, UserEntityFactory>("User1", true, false, ref _users1); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'ViewLevelEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(ViewLevelEntity))]
		public virtual EntityCollection<ViewLevelEntity> ViewLevels { get { return GetOrCreateEntityCollection<ViewLevelEntity, ViewLevelEntityFactory>("User", true, false, ref _viewLevels); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'ViewLevelEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(ViewLevelEntity))]
		public virtual EntityCollection<ViewLevelEntity> ViewLevels1 { get { return GetOrCreateEntityCollection<ViewLevelEntity, ViewLevelEntityFactory>("User1", true, false, ref _viewLevels1); } }

		/// <summary>Gets / sets related entity of type 'PersonEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual PersonEntity Person
		{
			get { return _person; }
			set { SetSingleRelatedEntityNavigator(value, "Person"); }
		}

		/// <summary>Gets / sets related entity of type 'UserEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual UserEntity User
		{
			get { return _user; }
			set { SetSingleRelatedEntityNavigator(value, "User"); }
		}

		/// <summary>Gets / sets related entity of type 'UserEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual UserEntity User1
		{
			get { return _user1; }
			set { SetSingleRelatedEntityNavigator(value, "User1"); }
		}
		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END


	}
}

namespace ConTech.Data
{
	public enum UserFieldIndex
	{
		///<summary>CreatedByUserId. </summary>
		CreatedByUserId,
		///<summary>DateCreatedUtc. </summary>
		DateCreatedUtc,
		///<summary>Id. </summary>
		Id,
		///<summary>LastModifiedByUserId. </summary>
		LastModifiedByUserId,
		///<summary>LastModifiedUtc. </summary>
		LastModifiedUtc,
		///<summary>ObjectStatus. </summary>
		ObjectStatus,
		///<summary>Password. </summary>
		Password,
		///<summary>PersonId. </summary>
		PersonId,
		///<summary>ResetExpirationDate. </summary>
		ResetExpirationDate,
		///<summary>ResetToken. </summary>
		ResetToken,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace ConTech.Data.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: User. </summary>
	public partial class UserRelations: RelationFactory
	{
		/// <summary>Returns a new IEntityRelation object, between UserEntity and EntityTypeEntity over the 1:n relation they have, using the relation between the fields: User.Id - EntityType.CreatedByUserId</summary>
		public virtual IEntityRelation EntityTypeEntityUsingCreatedByUserId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "EntityTypes", true, new[] { UserFields.Id, EntityTypeFields.CreatedByUserId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between UserEntity and EntityTypeEntity over the 1:n relation they have, using the relation between the fields: User.Id - EntityType.LastModifiedByUserId</summary>
		public virtual IEntityRelation EntityTypeEntityUsingLastModifiedByUserId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "EntityTypes1", true, new[] { UserFields.Id, EntityTypeFields.LastModifiedByUserId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between UserEntity and LevelChildEntity over the 1:n relation they have, using the relation between the fields: User.Id - LevelChild.CreatedByUserId</summary>
		public virtual IEntityRelation LevelChildEntityUsingCreatedByUserId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "LevelChildren", true, new[] { UserFields.Id, LevelChildFields.CreatedByUserId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between UserEntity and LevelChildEntity over the 1:n relation they have, using the relation between the fields: User.Id - LevelChild.LastModifiedByUserId</summary>
		public virtual IEntityRelation LevelChildEntityUsingLastModifiedByUserId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "LevelChildren1", true, new[] { UserFields.Id, LevelChildFields.LastModifiedByUserId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between UserEntity and LevelEntityEntity over the 1:n relation they have, using the relation between the fields: User.Id - LevelEntity.CreatedByUserId</summary>
		public virtual IEntityRelation LevelEntityEntityUsingCreatedByUserId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "LevelEntities", true, new[] { UserFields.Id, LevelEntityFields.CreatedByUserId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between UserEntity and LevelEntityEntity over the 1:n relation they have, using the relation between the fields: User.Id - LevelEntity.LastModifiedByUserId</summary>
		public virtual IEntityRelation LevelEntityEntityUsingLastModifiedByUserId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "LevelEntities1", true, new[] { UserFields.Id, LevelEntityFields.LastModifiedByUserId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between UserEntity and PersonEntity over the 1:n relation they have, using the relation between the fields: User.Id - Person.CreatedByUserId</summary>
		public virtual IEntityRelation PersonEntityUsingCreatedByUserId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "People", true, new[] { UserFields.Id, PersonFields.CreatedByUserId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between UserEntity and PersonEntity over the 1:n relation they have, using the relation between the fields: User.Id - Person.LastModifiedByUserId</summary>
		public virtual IEntityRelation PersonEntityUsingLastModifiedByUserId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "People1", true, new[] { UserFields.Id, PersonFields.LastModifiedByUserId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between UserEntity and ProjectEntity over the 1:n relation they have, using the relation between the fields: User.Id - Project.CreatedByUserId</summary>
		public virtual IEntityRelation ProjectEntityUsingCreatedByUserId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "Projects", true, new[] { UserFields.Id, ProjectFields.CreatedByUserId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between UserEntity and ProjectEntity over the 1:n relation they have, using the relation between the fields: User.Id - Project.LastModifiedByUserId</summary>
		public virtual IEntityRelation ProjectEntityUsingLastModifiedByUserId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "Projects1", true, new[] { UserFields.Id, ProjectFields.LastModifiedByUserId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between UserEntity and ProjectViewEntity over the 1:n relation they have, using the relation between the fields: User.Id - ProjectView.CreatedByUserId</summary>
		public virtual IEntityRelation ProjectViewEntityUsingCreatedByUserId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "ProjectViews", true, new[] { UserFields.Id, ProjectViewFields.CreatedByUserId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between UserEntity and ProjectViewEntity over the 1:n relation they have, using the relation between the fields: User.Id - ProjectView.LastModifiedByUserId</summary>
		public virtual IEntityRelation ProjectViewEntityUsingLastModifiedByUserId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "ProjectViews1", true, new[] { UserFields.Id, ProjectViewFields.LastModifiedByUserId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between UserEntity and UserEntity over the 1:n relation they have, using the relation between the fields: User.Id - User.CreatedByUserId</summary>
		public virtual IEntityRelation UserEntityUsingCreatedByUserId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "Users", true, new[] { UserFields.Id, UserFields.CreatedByUserId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between UserEntity and UserEntity over the 1:n relation they have, using the relation between the fields: User.Id - User.LastModifiedByUserId</summary>
		public virtual IEntityRelation UserEntityUsingLastModifiedByUserId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "Users1", true, new[] { UserFields.Id, UserFields.LastModifiedByUserId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between UserEntity and ViewLevelEntity over the 1:n relation they have, using the relation between the fields: User.Id - ViewLevel.CreatedByUserId</summary>
		public virtual IEntityRelation ViewLevelEntityUsingCreatedByUserId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "ViewLevels", true, new[] { UserFields.Id, ViewLevelFields.CreatedByUserId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between UserEntity and ViewLevelEntity over the 1:n relation they have, using the relation between the fields: User.Id - ViewLevel.LastModifiedByUserId</summary>
		public virtual IEntityRelation ViewLevelEntityUsingLastModifiedByUserId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "ViewLevels1", true, new[] { UserFields.Id, ViewLevelFields.LastModifiedByUserId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between UserEntity and PersonEntity over the m:1 relation they have, using the relation between the fields: User.PersonId - Person.Id</summary>
		public virtual IEntityRelation PersonEntityUsingPersonId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "Person", false, new[] { PersonFields.Id, UserFields.PersonId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between UserEntity and UserEntity over the m:1 relation they have, using the relation between the fields: User.CreatedByUserId - User.Id</summary>
		public virtual IEntityRelation UserEntityUsingIdCreatedByUserId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "User", false, new[] { UserFields.Id, UserFields.CreatedByUserId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between UserEntity and UserEntity over the m:1 relation they have, using the relation between the fields: User.LastModifiedByUserId - User.Id</summary>
		public virtual IEntityRelation UserEntityUsingIdLastModifiedByUserId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "User1", false, new[] { UserFields.Id, UserFields.LastModifiedByUserId }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticUserRelations
	{
		internal static readonly IEntityRelation EntityTypeEntityUsingCreatedByUserIdStatic = new UserRelations().EntityTypeEntityUsingCreatedByUserId;
		internal static readonly IEntityRelation EntityTypeEntityUsingLastModifiedByUserIdStatic = new UserRelations().EntityTypeEntityUsingLastModifiedByUserId;
		internal static readonly IEntityRelation LevelChildEntityUsingCreatedByUserIdStatic = new UserRelations().LevelChildEntityUsingCreatedByUserId;
		internal static readonly IEntityRelation LevelChildEntityUsingLastModifiedByUserIdStatic = new UserRelations().LevelChildEntityUsingLastModifiedByUserId;
		internal static readonly IEntityRelation LevelEntityEntityUsingCreatedByUserIdStatic = new UserRelations().LevelEntityEntityUsingCreatedByUserId;
		internal static readonly IEntityRelation LevelEntityEntityUsingLastModifiedByUserIdStatic = new UserRelations().LevelEntityEntityUsingLastModifiedByUserId;
		internal static readonly IEntityRelation PersonEntityUsingCreatedByUserIdStatic = new UserRelations().PersonEntityUsingCreatedByUserId;
		internal static readonly IEntityRelation PersonEntityUsingLastModifiedByUserIdStatic = new UserRelations().PersonEntityUsingLastModifiedByUserId;
		internal static readonly IEntityRelation ProjectEntityUsingCreatedByUserIdStatic = new UserRelations().ProjectEntityUsingCreatedByUserId;
		internal static readonly IEntityRelation ProjectEntityUsingLastModifiedByUserIdStatic = new UserRelations().ProjectEntityUsingLastModifiedByUserId;
		internal static readonly IEntityRelation ProjectViewEntityUsingCreatedByUserIdStatic = new UserRelations().ProjectViewEntityUsingCreatedByUserId;
		internal static readonly IEntityRelation ProjectViewEntityUsingLastModifiedByUserIdStatic = new UserRelations().ProjectViewEntityUsingLastModifiedByUserId;
		internal static readonly IEntityRelation UserEntityUsingCreatedByUserIdStatic = new UserRelations().UserEntityUsingCreatedByUserId;
		internal static readonly IEntityRelation UserEntityUsingLastModifiedByUserIdStatic = new UserRelations().UserEntityUsingLastModifiedByUserId;
		internal static readonly IEntityRelation ViewLevelEntityUsingCreatedByUserIdStatic = new UserRelations().ViewLevelEntityUsingCreatedByUserId;
		internal static readonly IEntityRelation ViewLevelEntityUsingLastModifiedByUserIdStatic = new UserRelations().ViewLevelEntityUsingLastModifiedByUserId;
		internal static readonly IEntityRelation PersonEntityUsingPersonIdStatic = new UserRelations().PersonEntityUsingPersonId;
		internal static readonly IEntityRelation UserEntityUsingIdCreatedByUserIdStatic = new UserRelations().UserEntityUsingIdCreatedByUserId;
		internal static readonly IEntityRelation UserEntityUsingIdLastModifiedByUserIdStatic = new UserRelations().UserEntityUsingIdLastModifiedByUserId;

		/// <summary>CTor</summary>
		static StaticUserRelations() { }
	}
}
